//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
// LGUI -> COMMAND
// LALT -> OPTION

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

&mt {
    quick-tap-ms = <175>;
    global-quick-tap;
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_parenthesis {
            bindings = <&l_par_r>;
            key-positions = <6 16>;
            layers = <0>;
        };

        right_parenthesis {
            bindings = <&kp SQT>;
            key-positions = <8 18>;
            layers = <0>;
        };

        left_bracket {
            bindings = <&l_brace_r>;
            key-positions = <16 27>;
            layers = <0>;
        };

        right_bracket {
            bindings = <&l_bracket_r>;
            key-positions = <18 29>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp MINUS>;
            key-positions = <9 19>;
            layers = <0>;
        };

        or_char {
            bindings = <&kp EQUAL>;
            key-positions = <17 28>;
            layers = <0 1>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 11>;
            layers = <0>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <0 10>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <12 23>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <13 24>;
            layers = <0>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <7 17>;
            layers = <0 1>;
        };

        esc {
            bindings = <&kp RS(RA(RC(RG(F))))>;
            key-positions = <16 17 18>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <11 22>;
            layers = <0>;
        };
    };

    behaviors {
        l_par_r: l_par_r {
            compatible = "zmk,behavior-mod-morph";
            label = "L_PAR_R";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        l_brace_r: l_brace_r {
            compatible = "zmk,behavior-mod-morph";
            label = "L_BRACE_R";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        l_bracket_r: l_bracket_r {
            compatible = "zmk,behavior-mod-morph";
            label = "L_BRACKET_R";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     E     ┃     R     ┃     T     ┃   ┃     Y     ┃     U     ┃     I     ┃     O     ┃     P     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     S     ┃     D     ┃     F     ┃     G     ┃   ┃     H     ┃     J     ┃     K     ┃     L     ┃     ;     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     N     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃    ESC    ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                                  &kp Q        &kp W       &kp E               &kp R        &kp T                 &kp Y         &kp U        &kp I                &kp O       &kp P
                                  &mt LCTRL A  &mt LALT S  &mt LEFT_COMMAND D  &mt LSHFT F  &kp G                 &kp H         &mt RSHFT J  &mt RIGHT_COMMAND K  &mt RALT L  &mt RCTRL SEMI
&mt LS(LA(LC(LEFT_COMMAND))) SQT  &kp Z        &kp X       &kp C               &kp V        &kp B                 &kp N         &kp M        &kp COMMA            &kp DOT     &kp FSLH        &kp NON_US_BACKSLASH
                                                           &lt 1 DEL           &lt 2 SPACE  &mt LEFT_SHIFT TAB    &lt 3 ESCAPE  &lt 4 ENTER  &lt 0 BACKSPACE
            >;
        };

        numbers {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp PLUS              &kp N7  &kp N8  &kp N9  &kp N0
        &trans  &trans  &trans  &trans  &trans    &kp MINUS             &kp N4  &kp N5  &kp N6  &kp PERIOD
&trans  &trans  &trans  &trans  &trans  &trans    &kp NON_US_BACKSLASH  &kp N1  &kp N2  &kp N3  &kp COMMA   &trans
                        &trans  &trans  &trans    &trans                &trans  &trans
            >;
        };

        nav {
            bindings = <
        &trans  &trans  &kp F2      &trans  &trans    &kp LA(UP_ARROW)       &kp PAGE_UP    &kp RS(RA(RG(RC(L))))  &kp END          &msc SCRL_UP
        &trans  &trans  &kp RS(F2)  &trans  &trans    &kp RS(RG(RC(RA(L))))  &kp LEFT       &kp UP_ARROW           &kp RIGHT_ARROW  &mkp LCLK
&trans  &trans  &trans  &kp F3      &trans  &trans    &kp LA(DOWN_ARROW)     &kp PAGE_DOWN  &kp DOWN_ARROW         &kp HOME         &msc SCRL_DOWN  &kp PRINTSCREEN
                        &trans      &trans  &trans    &trans                 &trans         &trans
            >;
        };

        fn_layer {
            bindings = <
        &trans  &kp F7  &kp F8  &kp F9  &kp F10    &trans  &kp F7  &kp F8  &kp F9  &kp F10
        &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        symbol_layer {
            bindings = <
       &kp EXCLAMATION  &kp AT             &kp HASH   &kp DOLLAR      &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp STAR  &kp MINUS  &kp EQUAL
       &kp GRAVE        &kp DOUBLE_QUOTES  &kp EQUAL  &kp MINUS       &kp PLUS       &none      &none          &none     &none      &kp NON_US_BACKSLASH
&none  &kp TILDE        &kp PIPE           &none      &kp UNDERSCORE  &none          &none      &none          &none     &none      &none                 &none
                                           &none      &none           &none          &none      &none          &none
            >;
        };
    };
};
